-- Weapon recoil settings
local weapon_table = {Horizontal = 0, Vertical = 2}
local toggle_key   = "capslock"
local fire_key     = 1

local is_active = true
local growth_factor_x = 0
local growth_factor_y = 0

-- Function to generate random volatility
function Volatility(_range, _impact)
    return _range * (1 + _impact * math.random())
end

-- Move mouse horizontally with small growth and random factor
function Move_x(_horizontal_recoil)
    local random_factor = 0.8 + 0.4 * math.random()  -- 0.8–1.2
    growth_factor_x = growth_factor_x + 0.01  -- tiny incremental growth
    -- add small random jitter including random sideways movement
    local jitter = (math.random() < 0.2) and math.random(-1, 1) or 0  -- 20% chance
    MoveMouseRelative(math.floor(Volatility(random_factor, 1) * _horizontal_recoil + growth_factor_x) + jitter, 0)
end

-- Move mouse vertically with small growth and random factor
function Move_y(_vertical_recoil)
    local random_factor = 0.8 + 0.4 * math.random()  -- 0.8–1.2
    growth_factor_y = growth_factor_y + 0.01  -- tiny incremental growth
    -- add small random jitter including tiny sideways movement
    local jitter_x = (math.random() < 0.1) and math.random(-1, 1) or 0  -- 10% chance horizontal jitter
    local jitter_y = (math.random() < 0.1) and math.random(-1, 1) or 0  -- 10% chance vertical jitter
    MoveMouseRelative(jitter_x, math.floor(Volatility(random_factor, 1) * _vertical_recoil + growth_factor_y) + jitter_y)
end

-- Main firing function
function Fire()
    -- reset growth factors for each new spray
    growth_factor_x, growth_factor_y = 0, 0

    local horizontal_recoil = weapon_table["Horizontal"]
    local vertical_recoil = weapon_table["Vertical"]

    local float_x = math.abs(horizontal_recoil) - math.floor(math.abs(horizontal_recoil))
    local float_y = math.abs(vertical_recoil) - math.floor(math.abs(vertical_recoil))

    local i, j = 0, 0

    repeat
        if horizontal_recoil ~= 0 then
            if horizontal_recoil < 0 then
                Move_x(horizontal_recoil + float_x)
            else
                Move_x(horizontal_recoil - float_x)
            end
        end

        if vertical_recoil ~= 0 then
            if vertical_recoil < 0 then
                Move_y(vertical_recoil + float_y)
            else
                Move_y(vertical_recoil - float_y)
            end
        end

        if float_x ~= 0 then
            i = i + float_x
            if i >= 1 * Volatility(0.7, 1) then
                if horizontal_recoil > 0 then Move_x(1) else Move_x(-1) end
                i = 0
            end
        end

        if float_y ~= 0 then
            j = j + float_y
            if j >= 1 * Volatility(0.7, 1) then
                if vertical_recoil > 0 then Move_y(1) else Move_y(-1) end
                j = 0
            end
        end

        -- Random fire delay between 6-12 ms
        local delay = math.random(6, 12)
        Sleep(delay)
    until not (IsMouseButtonPressed(fire_key) and IsMouseButtonPressed(3))  -- requires LMB + RMB
end

-- Event handler
function OnEvent(event, arg)
    if event == "PROFILE_ACTIVATED" then
        EnablePrimaryMouseButtonEvents(true)
    elseif event == "PROFILE_DEACTIVATED" then
        ReleaseMouseButton(fire_key)
    end

    if IsKeyLockOn(toggle_key) then
        if not is_active then is_active = true end
        if event == "MOUSE_BUTTON_PRESSED" and arg == fire_key then
            if IsMouseButtonPressed(3) then  -- only fire if RMB is held too
                Fire()
            end
        end
    else
        if is_active then is_active = false end
    end
end

-- Initialize toggle state
function Initialize()
    is_active = IsKeyLockOn(toggle_key)
end

Initialize()
