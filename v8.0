-- ==============================
-- PUBG No-Recoil v8.2 ULTRA SMOOTH (FIXED FOR G HUB)
-- S-curve + subpixel emulation + integer-only moves
-- ==============================

EnablePrimaryMouseButtonEvents(true)

-- === ADJUST THESE ONLY ===
local BASE_RECOIL_VERT = 5
local HORIZONTAL_DRIFT = 0
local BASE_DELAY = 16
-- =========================

local SensSetting = 1.0
local MIN_SENS = 0.1
local MAX_SENS = 12.0

function Log(msg)
    OutputLogMessage("[v8.2 SMOOTH] " .. msg .. "\n")
end

-- Seed
math.randomseed(GetRunningTime() % 32768)
for i = 1, 20 do math.random() end

-- ==============================
-- SMOOTH PULL: Emulates subpixel with 2x resolution
-- ==============================
function SmoothPull(totalVert, totalHoriz)
    local vRemaining = totalVert
    local hRemaining = totalHoriz
    local vAccum = 0.0  -- Subpixel accumulator
    local hAccum = 0.0

    local steps = math.max(1, math.ceil(totalVert * 1.5))  -- More steps = smoother

    for i = 1, steps do
        local t = i / steps
        local curve = t * t * (3 - 2 * t)  -- S-curve

        -- Vertical: Accumulate subpixel
        local vTarget = curve * totalVert
        local vStep = vTarget - vAccum
        vAccum = vAccum + vStep

        -- Horizontal
        local hTarget = curve * totalHoriz
        local hStep = hTarget - hAccum
        hAccum = hAccum + hStep

        -- Convert to integer ONLY when >= 1.0
        local moveX = 0
        local moveY = 0

        if math.abs(vAccum) >= 1.0 then
            moveY = vAccum > 0 and 1 or -1
            vAccum = vAccum - moveY
        end

        if math.abs(hAccum) >= 1.0 then
            moveX = hAccum > 0 and 1 or -1
            hAccum = hAccum - moveX
        end

        -- Micro jitter (integer only)
        if moveX == 0 and moveY == 0 then
            if math.random() < 0.3 then
                moveX = math.random() < 0.5 and -1 or 1
            end
        end

        if moveX ~= 0 or moveY ~= 0 then
            MoveMouseRelative(moveX, moveY)
        end

        -- Ultra smooth delay
        Sleep(1 + math.random(0, 1))
    end

    Sleep(BASE_DELAY + math.random(-2, 2))
end

-- ==============================
-- MAIN EVENT
-- ==============================
function OnEvent(event, arg)
    if event == "MOUSE_BUTTON_PRESSED" and arg == 4 then
        SensSetting = math.min(SensSetting + 0.02, MAX_SENS)
        Log("Sens: " .. string.format("%.2f", SensSetting))
    elseif event == "MOUSE_BUTTON_PRESSED" and arg == 5 then
        SensSetting = math.max(SensSetting - 0.02, MIN_SENS)
        Log("Sens: " .. string.format("%.2f", SensSetting))
    end

    if event == "MOUSE_BUTTON_PRESSED" and arg == 1 then
        if IsKeyLockOn("scrolllock") and IsMouseButtonPressed(3) then
            Log("SMOOTH ACTIVE")

            while IsMouseButtonPressed(1) and IsMouseButtonPressed(3) and IsKeyLockOn("scrolllock") do
                local vertMult = IsKeyLockOn("capslock") and 1.68 or 1.0
                local vertVar = (math.random() - 0.5) * 0.8
                local vert = (BASE_RECOIL_VERT + vertVar) * SensSetting * vertMult

                local horizVar = (math.random() - 0.5) * 0.6
                local horiz = HORIZONTAL_DRIFT + horizVar

                SmoothPull(vert, horiz)
            end

            Log("SMOOTH DEACTIVATED")
        end
    end
end
